<release-component>
  <nav class="navbar">
    <div class="navbar-container">
      <div class="logo-container">
        <div class="logo" onclick={goHome}>üéß Music App</div>
        <a href="#/favorites" class="favorites-link" if={props.loggedIn}>
          ‚≠ê ({state.favorites.length})
        </a>          
      </div>
  
      <button class="btn-login" onclick={onLogin} if={!props.loggedIn}>Connexion / Inscription</button>
      <button class="btn-logout" onclick={onLogout} if={props.loggedIn}>D√©connexion</button>
    </div>
  </nav>
  
  <div class="release-container" if={state.release}>
    <h1>{state.release.title}</h1>
    <p class="format-date">
      {state.release.formats?.[0]?.name || 'Format inconnu'} - {state.release.released || 'Date inconnue'}
    </p>
  
    <p class="note" if={state.release.community?.rating}>
      {state.release.community.rating.average}‚≠ê ({state.release.community.rating.count} votes)
    </p>
  
    <div class="main-info">
      <div class="release-cover">
        <img src={state.release.cover_image || state.release.images?.[0]?.uri || 'https://via.placeholder.com/300'}
             alt="cover"
             onerror="this.src='https://via.placeholder.com/300'">
      </div>
  
      <div class="collapsible">
        <details>
          <summary>Track list</summary>
          <ul>
            <!-- Utilisation d'un getter "tracklist" pour √©viter l'op√©rateur || dans l'attribut each -->
            <li each={ track in tracklist }>
              <strong>{ track.position }</strong> - { track.title } - { track.duration }
            </li>
          </ul>
        </details>
  
        <div class="genres" if={genres.length}>
          <span class="tag" each={ genre in genres }>{ genre }</span>
        </div>
      </div>
    </div>
  
    <div class="collapsible">
      <details if={extraartists.length}>
        <summary>Cr√©dits</summary>
        <ul>
          <li each={ credit in extraartists }>
            {credit.name} - {credit.role}
          </li>
        </ul>
      </details>
  
      <details>
        <summary>Notes</summary>
        <p>{state.release.notes || "Pas de notes disponibles."}</p>
      </details>
  
      <details if={artists.length}>
        <summary>Artistes</summary>
        <ul>
          <li each={ artist in artists }>{ artist.name }</li>
        </ul>
      </details>
    </div>
  </div>
  
  <p if={!state.release}>Chargement en cours...</p>
  
  <script>
    import { getFavorites } from '../services/favorites'
    import { getReleaseDetails } from '../services/discogs'
    import { observeAuthState } from '../services/firebase-auth'
    
    export default {
      state: {
        release: null,
        favorites: [],
        favoritesLoaded: false
      },
      
      // Getters pour √©viter l'utilisation d'expressions binaires dans les "each"
      get tracklist() {
        return (this.state.release && this.state.release.tracklist) ? this.state.release.tracklist : [];
      },
      get genres() {
        return (this.state.release && this.state.release.genres) ? this.state.release.genres : [];
      },
      get extraartists() {
        return (this.state.release && this.state.release.extraartists) ? this.state.release.extraartists : [];
      },
      get artists() {
        return (this.state.release && this.state.release.artists) ? this.state.release.artists : [];
      },
      
      async onMounted() {
        const id = window.location.hash.split('/')[2];
  
        if (this.props.loggedIn && !this.state.favoritesLoaded) {
          try {
            const favs = await getFavorites();
            this.update({ favorites: favs, favoritesLoaded: true });
          } catch (e) {
            console.warn("Erreur chargement favoris", e);
          }
        }
  
        try {
          const releaseData = await getReleaseDetails(id);
          this.update({ release: releaseData });
        } catch (e) {
          console.error('Erreur de chargement release :', e);
          this.update({ release: null });
        }
      },
  
      goHome() {
        window.location.hash = "/";
      },
  
      onLogin() {
        this.props.onShowLogin?.();
      },
  
      onLogout() {
        this.props.onLogout?.();
      }
    }
  </script>
  
  <style>
    .navbar {
      background-color: #1f2937;
      color: #fff;
      padding: 15px 0;
      position: sticky;
      top: 0;
      z-index: 100;
      box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    }
  
    .navbar-container {
      display: flex;
      align-items: center;
      justify-content: space-between;
      max-width: 1200px;
      margin: 0 auto;
      width: 90%;
    }
  
    .logo {
      font-size: 1.4rem;
      font-weight: 700;
      cursor: pointer;
      color: white;
    }
  
    .logo-container {
      display: flex;
      align-items: center;
      gap: 10px;
    }
  
    .favorites-link {
      margin-left: 1rem;
      font-size: 1.5rem;
      text-decoration: none;
      color: gold;
      transition: transform 0.2s;
    }
  
    .favorites-link:hover {
      transform: scale(1.2);
    }
  
    .btn-login {
      background-color: #22c55e;
      padding: 8px 12px;
      border-radius: 5px;
      color: #fff;
      font-weight: 600;
    }
  
    .btn-logout {
      background-color: #e3342f;
      padding: 8px 12px;
      border-radius: 5px;
      color: #fff;
      font-weight: 600;
    }
  
    .release-container {
      max-width: 1000px;
      margin: 40px auto;
      padding: 20px;
      font-family: 'Segoe UI', sans-serif;
    }
  
    h1 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }
  
    .format-date {
      color: #555;
    }
  
    .note {
      color: #16a34a;
      margin-bottom: 20px;
    }
  
    .main-info {
      display: flex;
      gap: 30px;
      margin-top: 20px;
    }
  
    .release-cover img {
      width: 300px;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
  
    .collapsible {
      margin-top: 20px;
    }
  
    details {
      margin-bottom: 10px;
      border-top: 1px solid #ccc;
      padding-top: 10px;
    }
  
    summary {
      font-weight: bold;
      cursor: pointer;
    }
  
    .genres {
      margin-top: 15px;
    }
  
    .tag {
      background-color: #1f2937;
      color: white;
      padding: 4px 10px;
      margin-right: 5px;
      border-radius: 5px;
      font-size: 0.85rem;
      display: inline-block;
    }
  </style>
</release-component>
